CCEffect %{
techniques:
  - passes:
      - vert: sprite-vs:vert
        frag: sprite-fs:frag
        depthStencilState:
          depthTest: false
          depthWrite: false
        blendState:
          targets:
            - blend: true
              blendSrc: src_alpha
              blendDst: one_minus_src_alpha
              blendDstAlpha: one_minus_src_alpha
        rasterizerState:
          cullMode: none
        properties:
          alphaThreshold: { value: 0.5 }
          # 自定义参数
          # 发光颜色
          glowColor:
            {
              value: [1.0, 1.0, 0.0, 1.0],
              editor: { type: color, tooltip: "发光颜色" },
            }
          # 发光宽度
          glowColorSize:
            { value: 0.15, editor: { tooltip: "发光宽度", range: [0.0, 1.0] } }
          # 发光透明度阈值
          #   只有小于等于这个透明度的点才会发光
          glowThreshold:
            { value: 1.0, editor: { tooltip: "发光阈值", range: [0.0, 1.0] } }

}%

CCProgram sprite-vs %{
precision highp float;

#include <builtin/uniforms/cc-global>
#if USE_LOCAL
  #include <builtin/uniforms/cc-local>
#endif
in vec3 a_position;
in vec2 a_texCoord;
in vec4 a_color;
out vec4 v_color;

#if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
#endif

#if SAMPLE_FROM_RT
  #include <common/common-define>
#endif

vec4 vert() {
  vec4 pos = vec4(a_position, 1);
  #if USE_LOCAL
    pos = cc_matWorld * pos;
  #endif
  #if USE_PIXEL_ALIGNMENT
    pos = cc_matView * pos;
    pos.xyz = floor(pos.xyz);
    pos = cc_matProj * pos;
  #else
    pos = cc_matViewProj * pos;
  #endif
  
  #if USE_TEXTURE
    v_uv0 = a_uv0;
  #endif
  
  v_uv0 = a_texCoord;
  #if SAMPLE_FROM_RT
    CC_HANDLE_RT_SAMPLE_FLIP(v_uv0);
  #endif
  v_color = a_color;
  
  // pos *= vec4(2.0, 2.0, 1.0, 1.0);    
  return pos;
}
}%


CCProgram sprite-fs %{
precision highp float;
#include <builtin/internal/embedded-alpha>
#include <builtin/internal/alpha-test>
#include <builtin/uniforms/cc-global>

in vec4 v_color;

#if USE_TEXTURE
  in vec2 v_uv0;
  #pragma builtin(local)
  layout(set = 2, binding = 12)uniform sampler2D cc_spriteTexture;
#endif

/**
* 获取纹理uv颜色
*
* 主要实现：超出边界的统一返回 vec4(0.0, 0.0, 0.0, 0.0)
*
* * 超出左边界的uv，返回 v_uv0.x = 0 的颜色
* * 超出右边界的uv，返回 v_uv0.x = 1 的颜色
* * 超出上边界的uv，返回 v_uv0.y = 1 的颜色
* * 超出下边界的uv，返回 v_uv0.y = 0 的颜色
*
* 和实际在浏览器上显示（超出边界即为透明）的有区别，为了统一，这里适配一下，这样子，在编辑器上预览的效果就能和实际浏览器的保持一致
*/
vec4 getTextureColor(sampler2D mainTexture, vec2 v_uv0) {
  if (v_uv0.x > 1.0 || v_uv0.x < 0.0 || v_uv0.y > 1.0 || v_uv0.y < 0.0) {
    return vec4(0.0, 0.0, 0.0, 0.0);
  }
  return texture(mainTexture, v_uv0);
}

#if SHOW_OUTTER_GLOW
  
  uniform glow {
    // 发光颜色
    vec4 glowColor;
    // 发光范围
    float glowColorSize;
    // 发光阈值
    float glowThreshold;
    // 特别地，必须是 vec4 先于 float 声明
  };
  
  
  /**
  * 获取指定角度方向，距离为xxx的像素的透明度
  *
  * @param angle 角度 [0.0, 360.0]
  * @param dist 距离 [0.0, 1.0]
  *
  * @return alpha [0.0, 1.0]
  */
  float getColorAlpha(float angle, float dist) {
    // 角度转弧度，公式为：弧度 = 角度 * (pi / 180)
    float radian = angle * 0.01745329252; // 这个浮点数是 pi / 180
    vec4 color = getTextureColor(cc_spriteTexture, v_uv0 + vec2(dist * cos(radian), dist * sin(radian)));
    return color.a;
  }
  
  /**
  * 获取指定距离的周边像素的透明度平均值
  *
  * @param dist 距离 [0.0, 1.0]
  *
  * @return average alpha [0.0, 1.0]
  */
  float getAverageAlpha(float dist) {
    float totalAlpha = 0.0;
    // 改为每5度采样一次（72个点）
    totalAlpha += getColorAlpha(0.0, dist);
    totalAlpha += getColorAlpha(45.0, dist);
    totalAlpha += getColorAlpha(90.0, dist);
    totalAlpha += getColorAlpha(135.0, dist);
    totalAlpha += getColorAlpha(180.0, dist);
    totalAlpha += getColorAlpha(225.0, dist);
    totalAlpha += getColorAlpha(270.0, dist);
    totalAlpha += getColorAlpha(315.0, dist);
    return totalAlpha / 8.0;
  }
  
  // // for 循环写法据说耗性能
  // float totalAlpha = 0.0;
  // const float count = 12.0;
  // const float angle  = 360.0 / count;
  // for (float i = 0.0; i < count; i += 1.0) {
  //   totalAlpha += getColorAlpha(angle * i, dist) ;
  // }
  // return totalAlpha / count;
  
  
  /**
  * 获取发光的透明度 (更精细版本)
  */
  float getGlowAlpha() {
    if (glowColorSize == 0.0) {
      return 0.0;
    }
    
    // 将发光距离分成10个采样点
    float totalAlpha = 0.0;
    float stepSize = 0.1; // 1.0/10
    
    totalAlpha += getAverageAlpha(glowColorSize * stepSize * 1.0);
    totalAlpha += getAverageAlpha(glowColorSize * stepSize * 2.0);
    totalAlpha += getAverageAlpha(glowColorSize * stepSize * 3.0);
    totalAlpha += getAverageAlpha(glowColorSize * stepSize * 4.0);
    totalAlpha += getAverageAlpha(glowColorSize * stepSize * 5.0);
    totalAlpha += getAverageAlpha(glowColorSize * stepSize * 6.0);
    totalAlpha += getAverageAlpha(glowColorSize * stepSize * 7.0);
    totalAlpha += getAverageAlpha(glowColorSize * stepSize * 8.0);
    totalAlpha += getAverageAlpha(glowColorSize * stepSize * 9.0);
    totalAlpha += getAverageAlpha(glowColorSize * stepSize * 10.0);
    
    return totalAlpha * 0.1; // 1.0/10
  }
  
#endif

vec4 frag() {
  vec4 o = vec4(1, 1, 1, 1);
  
  #if USE_TEXTURE
    o *= texture(cc_spriteTexture, v_uv0);
    #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(cc_spriteTexture, v_uv0 + vec2(0, 0.5)).r;
    #endif
  #endif
  
  #if SHOW_OUTTER_GLOW
    // 获取发光透明度    
    // 此时我们得到的是内部透明度为1，靠近边缘的为接近0的透明度，其他位置为0的透明度    
    float alpha = getGlowAlpha();
    
    // 而外发光是从边缘开始的，那么什么算是边缘呢？    
    // 一般图像边缘是存在渐变，即从图像内 1.0-> 0.0 图像外，那么发光边缘我们可以这样子定义    
    // 当该点的透明度小于一个阈值，那么我们就当该点为一个发光点    
    if (alpha <= glowThreshold) {
      // 然后以阈值作为标量，重新将透明度归一化    
      alpha = alpha / glowThreshold;
      
      // 给点调料，让靠近边缘的更加亮    
      alpha = -1.0 * (alpha - 1.0) * (alpha - 1.0) * (alpha - 1.0) * (alpha - 1.0) + 1.0;
    } else {
      // 然后这里大于阈值的基本就是便是图像本身，不需要发光，那么将发光透明度置为0    
      alpha = 0.0;
    }
    
    // 忽略阈值，直接处理    
    // // 给点调料，让靠近边缘的更加亮    
    // alpha = -1.0 * (alpha - 1.0) * (alpha - 1.0) * (alpha - 1.0) * (alpha - 1.0) + 1.0;    
    
    // 外发光颜色    
    vec4 color_dest = glowColor * alpha;
    vec4 color_src = o;
    
    // 本次我们将先画外发光作为背景，然后在上方放图像      
    // 最终选择的混合模式如下：    
    //    
    // （原图像）color_src: GL_SRC_ALPHA    
    // （外发光）color_dest: GL_ONE_MINUS_SRC_ALPHAA    
    //     
    // 即最终颜色如下：    
    // color_src * GL_SRC_ALPHA + color_dest * GL_ONE_MINUS_SRC_ALPHAA    
    
    o = color_src * color_src.a + color_dest * (1.0 - color_src.a);
  #endif
  
  o *= v_color;
  ALPHA_TEST(o);
  
  return o;
}
}%

