
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        otherTexture:       { value: white , editor: { visible: true }}
        otherWorldPosition: { value: [0, 0, 0,0], editor: { visible: true } }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;
  out vec2 fragWorldPos;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);
    fragWorldPos = pos.xy;

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>

  uniform sampler2D otherTexture;
  uniform params{
    vec4 otherWorldPosition; //xy为坐标 zw为纹理的宽高
  };

  in vec4 color;
  in vec2 fragWorldPos;

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 12) uniform sampler2D cc_spriteTexture;
  #endif

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif
    // 计算当前片元在other纹理中的UV坐标
    // otherWorldPosition.xy是纹理中心坐标，需要转换为左下角坐标
    vec2 otherBottomLeft = otherWorldPosition.xy - otherWorldPosition.zw * 0.5;
    vec2 otherUV = (fragWorldPos - otherBottomLeft) / otherWorldPosition.zw;

    // 检查UV坐标是否在有效范围内
    if (otherUV.x >= 0.0 && otherUV.x <= 1.0 && otherUV.y >= 0.0 && otherUV.y <= 1.0) {
      // 采样other纹理
      vec4 otherColor = texture(otherTexture, otherUV);
      
      // 如果当前像素透明度不为0且other纹理的当前像素透明度不为0
      if (o.a > 0.0 && otherColor.a > 0.0) {
        o.a = 0.25;
      }
    }  
    o *= color;
    ALPHA_TEST(o);
    return o;
  }
}%
