CCEffect %{
techniques:
  - passes:
      - vert: sprite-vs:vert
        frag: sprite-fs:frag
        depthStencilState:
          depthTest: false
          depthWrite: false
        blendState:
          targets:
            - blend: true
              blendSrc: src_alpha
              blendDst: one_minus_src_alpha
              blendDstAlpha: one_minus_src_alpha
        rasterizerState:
          cullMode: none
        properties:
          glowColor: { value: [1.0, 1.0, 0.0, 1.0], editor: { type: color, tooltip: "发光颜色" } } 
          glowalphaThreshold: { value: 0.2 }
          glowColoWidth: { value: 0.1, editor: { tooltip: "发光宽度", range: [0.0, 1.0] } }
          glowThreshold: { value: 1.0, editor: { tooltip: "发光阈值", range: [0.0, 1.0] } }
          glowLerpRate: { value: 0.8, editor: {tooltip: "内发光颜色和原颜色的差值" , range: [0.0, 1.0]} }

}%

CCProgram sprite-vs %{
precision highp float;

#include <builtin/uniforms/cc-global>
#if USE_LOCAL
  #include <builtin/uniforms/cc-local>
#endif
in vec3 a_position;
in vec2 a_texCoord;
in vec4 a_color;
out vec4 v_color;

#if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
#endif

#if SAMPLE_FROM_RT
  #include <common/common-define>
#endif

vec4 vert() {
  vec4 pos = vec4(a_position, 1);
  #if USE_LOCAL
    pos = cc_matWorld * pos;
  #endif
  #if USE_PIXEL_ALIGNMENT
    pos = cc_matView * pos;
    pos.xyz = floor(pos.xyz);
    pos = cc_matProj * pos;
  #else
    pos = cc_matViewProj * pos;
  #endif
  
  #if USE_TEXTURE
    v_uv0 = a_uv0;
  #endif
  
  v_uv0 = a_texCoord;
  #if SAMPLE_FROM_RT
    CC_HANDLE_RT_SAMPLE_FLIP(v_uv0);
  #endif
  v_color = a_color;
  
  return pos;
}
}%


CCProgram sprite-fs %{
precision highp float;
#include <builtin/internal/embedded-alpha>
#include <builtin/internal/alpha-test>
#include <builtin/uniforms/cc-global>

in vec4 v_color;

#if USE_TEXTURE
  in vec2 v_uv0;
  #pragma builtin(local)
  layout(set = 2, binding = 12)uniform sampler2D cc_spriteTexture;
#endif


#if SHOW_OUTTER_GLOW
  
  uniform glow {
    vec4 glowColor;
    float glowalphaThreshold;
    float glowColoWidth;
    float glowThreshold;
    float glowLerpRate;
  };
  
  
  float calculateCircleSumAlpha(vec2 origin, float radius) {
    float sum = 0.0;
    float perAngle = 6.28318530718 / float(50); // 2*PI/times
    for(int i = 0; i < 50; i++) {
      vec2 newUV = origin + radius * vec2(cos(perAngle * float(i)), sin(perAngle * float(i)));
      sum += texture(cc_spriteTexture, newUV).a;
    }
    return sum;
  }



#endif

vec4 frag() {
  vec4 o = vec4(1, 1, 1, 1);
  vec3 innerColor = vec3(0, 0, 0);
  vec4 innerGlow = vec4(0, 0, 0, 0);
  
  #if USE_TEXTURE
    o *= texture(cc_spriteTexture, v_uv0);
    #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(cc_spriteTexture, v_uv0 + vec2(0, 0.5)).r;
    #endif
  #endif
  
  #if SHOW_OUTTER_GLOW
    if (glowColor.a > 0.0) { // 用alpha通道作为开关
      float alphaCircleSum = calculateCircleSumAlpha(v_uv0, glowColoWidth) / 50.0;
      float innerColorAlpha = 1.0 - clamp(alphaCircleSum - glowThreshold, 0.0, 1.0) / (1.0 - glowThreshold);

      if(o.a <= glowalphaThreshold){
        innerColorAlpha =0.0;
      }
      innerColor = glowColor.rgb * innerColorAlpha;
      innerGlow = vec4(innerColor, innerColorAlpha);
    }
    
    o = mix(o, innerGlow * 2.0, glowLerpRate * innerGlow.a);

  #endif
  
  o *= v_color;
  ALPHA_TEST(o);
  
  return o;
}
}%

